# Generated by Django 5.1.4 on 2025-02-27 07:24

import django.db.models.deletion
import django.utils.timezone
import utils.validators
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'password',
                    models.CharField(max_length=128, verbose_name='password'),
                ),
                (
                    'last_login',
                    models.DateTimeField(
                        blank=True, null=True, verbose_name='last login'
                    ),
                ),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text='Designates whether the user can log into this admin site.',
                        verbose_name='staff status',
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                        verbose_name='active',
                    ),
                ),
                (
                    'date_joined',
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name='date joined',
                    ),
                ),
                (
                    'uuid',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    'is_deleted',
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text='Designates whether this record was deleted using soft             deletion. Default is False.',
                    ),
                ),
                (
                    'created_on',
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text='Timestamp when this record was created.',
                    ),
                ),
                (
                    'updated_on',
                    models.DateTimeField(
                        auto_now=True,
                        help_text='Timestamp when this record was last updated.',
                    ),
                ),
                (
                    'deleted_on',
                    models.DateTimeField(
                        blank=True,
                        help_text='Timestamp when this record was soft deleted.',
                        null=True,
                    ),
                ),
                (
                    'first_name',
                    models.CharField(
                        blank=True,
                        help_text="User's first name",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    'last_name',
                    models.CharField(
                        blank=True,
                        help_text="User's last name",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    'profile_pic',
                    models.ImageField(
                        blank=True,
                        help_text="User's profile picture",
                        null=True,
                        upload_to='profile_pic',
                    ),
                ),
                (
                    'country_code',
                    models.CharField(
                        blank=True,
                        help_text='Country code for mobile number (e.g., +1, +91)',
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    'mobile',
                    models.CharField(
                        blank=True,
                        help_text='Primary mobile number used for authentication',
                        max_length=20,
                        null=True,
                        unique=True,
                        validators=[utils.validators.validate_phone_number],
                    ),
                ),
                (
                    'email',
                    models.EmailField(
                        db_index=True,
                        help_text='Email address for login and communication',
                        max_length=254,
                        unique=True,
                        verbose_name='Email address',
                    ),
                ),
                (
                    'gender',
                    models.CharField(
                        blank=True,
                        choices=[('M', 'Male'), ('F', 'Female')],
                        help_text="User's gender",
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    'dob',
                    models.DateField(
                        blank=True,
                        help_text="User's date of birth",
                        null=True,
                        verbose_name='Date of Birth',
                    ),
                ),
                (
                    'is_super_admin',
                    models.BooleanField(
                        default=False,
                        help_text='Indicates if the user has super admin privileges',
                    ),
                ),
                (
                    'is_seller',
                    models.BooleanField(
                        default=False,
                        help_text='Indicates if the user is a seller',
                    ),
                ),
                (
                    'cr_by_self',
                    models.BooleanField(
                        default=False,
                        help_text='Indicates if the user created their own account',
                    ),
                ),
                (
                    'is_password_reset_link_sent',
                    models.BooleanField(
                        default=False, help_text='Flag for password reset link'
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(class)s_created',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(class)s_updated',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={
                'ordering': ['-id'],
                'indexes': [
                    models.Index(
                        fields=['email'], name='users_user_email_6f2530_idx'
                    ),
                    models.Index(
                        fields=['mobile'], name='users_user_mobile_7d27b4_idx'
                    ),
                ],
            },
        ),
    ]
