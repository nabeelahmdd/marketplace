# Generated by Django 5.1.4 on 2025-03-02 10:02

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'password',
                    models.CharField(max_length=128, verbose_name='password'),
                ),
                (
                    'last_login',
                    models.DateTimeField(
                        blank=True, null=True, verbose_name='last login'
                    ),
                ),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'uuid',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text='Designates whether this record is active. Default is True.',
                    ),
                ),
                (
                    'is_deleted',
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text='Designates whether this record was deleted using soft             deletion. Default is False.',
                    ),
                ),
                (
                    'created_on',
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text='Timestamp when this record was created.',
                    ),
                ),
                (
                    'updated_on',
                    models.DateTimeField(
                        auto_now=True,
                        help_text='Timestamp when this record was last updated.',
                    ),
                ),
                (
                    'deleted_on',
                    models.DateTimeField(
                        blank=True,
                        help_text='Timestamp when this record was soft deleted.',
                        null=True,
                    ),
                ),
                ('name', models.CharField(max_length=150)),
                (
                    'email',
                    models.EmailField(
                        blank=True, max_length=254, null=True, unique=True
                    ),
                ),
                (
                    'mobile',
                    models.CharField(
                        blank=True, max_length=15, null=True, unique=True
                    ),
                ),
                (
                    'profile_image',
                    models.ImageField(
                        blank=True, null=True, upload_to='users/profiles/'
                    ),
                ),
                (
                    'location',
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ('is_verified', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                (
                    'date_joined',
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(class)s_created',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(class)s_updated',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'identifier',
                    models.CharField(
                        help_text='Phone number or email for which OTP is generated',
                        max_length=100,
                        verbose_name='Identifier',
                    ),
                ),
                (
                    'type',
                    models.CharField(
                        choices=[('PHONE', 'Phone'), ('EMAIL', 'Email')],
                        help_text='Whether OTP is sent to phone or email',
                        max_length=10,
                        verbose_name='OTP Type',
                    ),
                ),
                (
                    'purpose',
                    models.CharField(
                        choices=[
                            ('REGISTER', 'Registration'),
                            ('LOGIN', 'Login'),
                            ('RESET_PASSWORD', 'Reset Password'),
                            ('VERIFY_NEW_PHONE', 'Verify New Phone'),
                        ],
                        help_text='Purpose for which OTP is generated',
                        max_length=20,
                        verbose_name='OTP Purpose',
                    ),
                ),
                (
                    'otp',
                    models.CharField(
                        help_text='Generated OTP code',
                        max_length=6,
                        verbose_name='OTP Code',
                    ),
                ),
                (
                    'is_verified',
                    models.BooleanField(
                        default=False,
                        help_text='Whether the OTP has been verified',
                        verbose_name='Is Verified',
                    ),
                ),
                (
                    'attempts',
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text='Number of verification attempts',
                        verbose_name='Verification Attempts',
                    ),
                ),
                (
                    'max_attempts',
                    models.PositiveSmallIntegerField(
                        default=3,
                        help_text='Maximum allowed verification attempts',
                        verbose_name='Max Attempts',
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text='When the OTP was generated',
                        verbose_name='Created At',
                    ),
                ),
                (
                    'expires_at',
                    models.DateTimeField(
                        help_text='When the OTP expires',
                        verbose_name='Expires At',
                    ),
                ),
            ],
            options={
                'verbose_name': 'OTP',
                'verbose_name_plural': 'OTPs',
                'indexes': [
                    models.Index(
                        fields=['identifier'], name='otp_identifier_idx'
                    ),
                    models.Index(fields=['created_at'], name='otp_created_idx'),
                ],
            },
        ),
        migrations.CreateModel(
            name='Seller',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'uuid',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text='Designates whether this record is active. Default is True.',
                    ),
                ),
                (
                    'is_deleted',
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text='Designates whether this record was deleted using soft             deletion. Default is False.',
                    ),
                ),
                (
                    'created_on',
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text='Timestamp when this record was created.',
                    ),
                ),
                (
                    'updated_on',
                    models.DateTimeField(
                        auto_now=True,
                        help_text='Timestamp when this record was last updated.',
                    ),
                ),
                (
                    'deleted_on',
                    models.DateTimeField(
                        blank=True,
                        help_text='Timestamp when this record was soft deleted.',
                        null=True,
                    ),
                ),
                ('name', models.CharField(blank=True, max_length=150)),
                ('id_number', models.CharField(blank=True, max_length=150)),
                (
                    'mobile',
                    models.CharField(
                        blank=True, max_length=15, null=True, unique=True
                    ),
                ),
                ('is_company', models.BooleanField(default=False)),
                (
                    'owner_name',
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    'address',
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(class)s_created',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(class)s_updated',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'user',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='seller_profile',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SellerVerificationFile',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'uuid',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text='Designates whether this record is active. Default is True.',
                    ),
                ),
                (
                    'is_deleted',
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text='Designates whether this record was deleted using soft             deletion. Default is False.',
                    ),
                ),
                (
                    'created_on',
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text='Timestamp when this record was created.',
                    ),
                ),
                (
                    'updated_on',
                    models.DateTimeField(
                        auto_now=True,
                        help_text='Timestamp when this record was last updated.',
                    ),
                ),
                (
                    'deleted_on',
                    models.DateTimeField(
                        blank=True,
                        help_text='Timestamp when this record was soft deleted.',
                        null=True,
                    ),
                ),
                ('file', models.FileField(upload_to='seller/verification/')),
                (
                    'created_by',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(class)s_created',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'seller',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='verification_files',
                        to='users.seller',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='%(class)s_updated',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SocialAccount',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'provider',
                    models.CharField(
                        choices=[
                            ('google', 'Google'),
                            ('facebook', 'Facebook'),
                            ('apple', 'Apple'),
                        ],
                        help_text='Social authentication provider (e.g., Google, Facebook)',
                        max_length=20,
                        verbose_name='Provider',
                    ),
                ),
                (
                    'provider_id',
                    models.CharField(
                        help_text='Unique ID from the social provider',
                        max_length=255,
                        verbose_name='Provider ID',
                    ),
                ),
                (
                    'email',
                    models.EmailField(
                        blank=True,
                        help_text='Email address from the social provider',
                        max_length=254,
                        null=True,
                        verbose_name='Provider Email',
                    ),
                ),
                (
                    'name',
                    models.CharField(
                        blank=True,
                        help_text="User's name from the social provider",
                        max_length=255,
                        null=True,
                        verbose_name='Provider Name',
                    ),
                ),
                (
                    'profile_picture',
                    models.URLField(
                        blank=True,
                        help_text='Profile picture URL from the social provider',
                        null=True,
                        verbose_name='Profile Picture URL',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        help_text='User this social account belongs to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='social_accounts',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'verbose_name': 'social account',
                'verbose_name_plural': 'social accounts',
            },
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ('email__isnull', False),
                    ('mobile__isnull', False),
                    _connector='OR',
                ),
                name='user_email_or_mobile_required',
            ),
        ),
        migrations.AddIndex(
            model_name='seller',
            index=models.Index(
                fields=['is_active', 'is_deleted'],
                name='users_selle_is_acti_45fbd8_idx',
            ),
        ),
        migrations.AddIndex(
            model_name='sellerverificationfile',
            index=models.Index(
                fields=['is_active', 'is_deleted'],
                name='users_selle_is_acti_3fe845_idx',
            ),
        ),
        migrations.AlterUniqueTogether(
            name='socialaccount',
            unique_together={('provider', 'provider_id')},
        ),
    ]
