# Generated by Django 5.1.4 on 2025-03-06 15:28

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('listings', '0003_rename_created_on_category_created_at_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'uuid',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text='Designates whether this record is active. Default is True.',
                    ),
                ),
                (
                    'is_deleted',
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text='Designates whether this record was deleted using soft             deletion. Default is False.',
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text='Timestamp when this record was created.',
                    ),
                ),
                (
                    'updated_at',
                    models.DateTimeField(
                        auto_now=True,
                        help_text='Timestamp when this record was last updated.',
                    ),
                ),
                (
                    'deleted_at',
                    models.DateTimeField(
                        blank=True,
                        help_text='Timestamp when this record was soft deleted.',
                        null=True,
                    ),
                ),
                ('content', models.TextField()),
                ('is_approved', models.BooleanField(default=True)),
                (
                    'listing',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='comments',
                        to='listings.listing',
                    ),
                ),
                (
                    'parent',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='replies',
                        to='listings.comment',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='comments',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='JobListing',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('company_name', models.CharField(max_length=255)),
                (
                    'job_type',
                    models.CharField(
                        choices=[
                            ('full_time', 'Full Time'),
                            ('part_time', 'Part Time'),
                            ('contract', 'Contract'),
                            ('temporary', 'Temporary'),
                            ('internship', 'Internship'),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    'experience_level',
                    models.CharField(
                        choices=[
                            ('entry', 'Entry Level'),
                            ('mid', 'Mid Level'),
                            ('senior', 'Senior Level'),
                            ('executive', 'Executive'),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    'salary_min',
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    'salary_max',
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    'salary_period',
                    models.CharField(
                        choices=[
                            ('hourly', 'Hourly'),
                            ('daily', 'Daily'),
                            ('weekly', 'Weekly'),
                            ('monthly', 'Monthly'),
                            ('yearly', 'Yearly'),
                        ],
                        default='monthly',
                        max_length=20,
                    ),
                ),
                ('remote_allowed', models.BooleanField(default=False)),
                (
                    'listing',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='job_details',
                        to='listings.listing',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='PropertyListing',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'property_type',
                    models.CharField(
                        choices=[
                            ('house', 'House'),
                            ('apartment', 'Apartment'),
                            ('villa', 'Villa'),
                            ('land', 'Land'),
                            ('commercial', 'Commercial'),
                            ('other', 'Other'),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    'offer_type',
                    models.CharField(
                        choices=[('sale', 'For Sale'), ('rent', 'For Rent')],
                        max_length=10,
                    ),
                ),
                (
                    'size',
                    models.DecimalField(
                        decimal_places=2,
                        help_text='Size in square meters',
                        max_digits=10,
                    ),
                ),
                (
                    'bedrooms',
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    'bathrooms',
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                ('furnished', models.BooleanField(default=False)),
                (
                    'parking_spaces',
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    'year_built',
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    'listing',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='property_details',
                        to='listings.listing',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='SearchQuery',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('query_text', models.TextField()),
                ('filters', models.JSONField(blank=True, default=dict)),
                (
                    'location_text',
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    'coordinates',
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ('radius', models.FloatField(blank=True, null=True)),
                ('result_count', models.IntegerField(default=0)),
                (
                    'ip_address',
                    models.GenericIPAddressField(blank=True, null=True),
                ),
                (
                    'session_id',
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                (
                    'category',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='listings.category',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='search_queries',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SavedSearch',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'uuid',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text='Designates whether this record is active. Default is True.',
                    ),
                ),
                (
                    'is_deleted',
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text='Designates whether this record was deleted using soft             deletion. Default is False.',
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text='Timestamp when this record was created.',
                    ),
                ),
                (
                    'updated_at',
                    models.DateTimeField(
                        auto_now=True,
                        help_text='Timestamp when this record was last updated.',
                    ),
                ),
                (
                    'deleted_at',
                    models.DateTimeField(
                        blank=True,
                        help_text='Timestamp when this record was soft deleted.',
                        null=True,
                    ),
                ),
                ('name', models.CharField(max_length=255)),
                ('alert_enabled', models.BooleanField(default=True)),
                (
                    'alert_frequency',
                    models.CharField(
                        choices=[
                            ('instant', 'Instant'),
                            ('daily', 'Daily'),
                            ('weekly', 'Weekly'),
                        ],
                        default='daily',
                        max_length=20,
                    ),
                ),
                (
                    'last_alert_sent_at',
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='saved_searches',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'search_query',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='saved_by',
                        to='listings.searchquery',
                    ),
                ),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VehicleListing',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('make', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('year', models.PositiveIntegerField()),
                (
                    'mileage',
                    models.PositiveIntegerField(
                        help_text='Mileage in kilometers'
                    ),
                ),
                (
                    'transmission',
                    models.CharField(
                        choices=[
                            ('manual', 'Manual'),
                            ('automatic', 'Automatic'),
                            ('semi_auto', 'Semi-Automatic'),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    'fuel_type',
                    models.CharField(
                        choices=[
                            ('petrol', 'Petrol'),
                            ('diesel', 'Diesel'),
                            ('electric', 'Electric'),
                            ('hybrid', 'Hybrid'),
                            ('other', 'Other'),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    'engine_size',
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                (
                    'doors',
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    'color',
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    'listing',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='vehicle_details',
                        to='listings.listing',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                (
                    'listing',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='favorites',
                        to='listings.listing',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='favorites',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'unique_together': {('user', 'listing')},
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'uuid',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text='Designates whether this record is active. Default is True.',
                    ),
                ),
                (
                    'is_deleted',
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text='Designates whether this record was deleted using soft             deletion. Default is False.',
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text='Timestamp when this record was created.',
                    ),
                ),
                (
                    'updated_at',
                    models.DateTimeField(
                        auto_now=True,
                        help_text='Timestamp when this record was last updated.',
                    ),
                ),
                (
                    'deleted_at',
                    models.DateTimeField(
                        blank=True,
                        help_text='Timestamp when this record was soft deleted.',
                        null=True,
                    ),
                ),
                (
                    'value',
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]
                    ),
                ),
                ('review', models.TextField(blank=True, null=True)),
                ('is_approved', models.BooleanField(default=True)),
                (
                    'listing',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='ratings',
                        to='listings.listing',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='ratings',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'unique_together': {('user', 'listing')},
            },
        ),
        migrations.CreateModel(
            name='RecommendedListing',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('score', models.FloatField(default=0)),
                (
                    'reason',
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ('is_viewed', models.BooleanField(default=False)),
                ('is_clicked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                (
                    'listing',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='recommendations',
                        to='listings.listing',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='recommended_listings',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'ordering': ['-score', '-created_at'],
                'unique_together': {('user', 'listing')},
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'uuid',
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text='Designates whether this record is active. Default is True.',
                    ),
                ),
                (
                    'is_deleted',
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text='Designates whether this record was deleted using soft             deletion. Default is False.',
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text='Timestamp when this record was created.',
                    ),
                ),
                (
                    'updated_at',
                    models.DateTimeField(
                        auto_now=True,
                        help_text='Timestamp when this record was last updated.',
                    ),
                ),
                (
                    'deleted_at',
                    models.DateTimeField(
                        blank=True,
                        help_text='Timestamp when this record was soft deleted.',
                        null=True,
                    ),
                ),
                (
                    'reason',
                    models.CharField(
                        choices=[
                            ('prohibited', 'Prohibited Item'),
                            ('counterfeit', 'Counterfeit Item'),
                            ('inappropriate', 'Inappropriate Content'),
                            ('misleading', 'Misleading Information'),
                            ('spam', 'Spam or Scam'),
                            ('other', 'Other'),
                        ],
                        max_length=20,
                    ),
                ),
                ('details', models.TextField()),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('pending', 'Pending Review'),
                            ('investigating', 'Under Investigation'),
                            ('resolved', 'Resolved'),
                            ('rejected', 'Rejected'),
                        ],
                        default='pending',
                        max_length=20,
                    ),
                ),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                (
                    'listing',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='reports',
                        to='listings.listing',
                    ),
                ),
                (
                    'reported_by',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='reports_filed',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'reported_user',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='reports_against',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'resolved_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='resolved_reports',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'abstract': False,
                'indexes': [
                    models.Index(
                        fields=['is_active', 'is_deleted'],
                        name='listings_re_is_acti_d6f883_idx',
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name='searchquery',
            index=models.Index(
                fields=['user', 'created_at'],
                name='listings_se_user_id_426977_idx',
            ),
        ),
        migrations.AddIndex(
            model_name='searchquery',
            index=models.Index(
                fields=['query_text'], name='listings_se_query_t_02b64a_idx'
            ),
        ),
    ]
